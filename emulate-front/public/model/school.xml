<krpano
    debugmode="true"
    idletime="60"
    fh="130"
    editor="0"
>


    <!--
                     _           _     _____     _
     _ __  _ __ ___ (_) ___  ___| |_  |___ /  __| |
    | '_ \| '__/ _ \| |/ _ \/ __| __|   |_ \ / _` |
    | |_) | | | (_) | |  __/ (__| |_   ___) | (_| |
    | .__/|_|  \___// |\___|\___|\__| |____/ \__,_|
    |_|           |__/

    -->
    <include url="include/hotspots.xml" ></include>
    <include url="include/works-school.xml" ></include>
    <include url="school_project3d.xml" />



    <!--


                       _             _
     _ __   __ ___   _(_) __ _  __ _| |_ ___  _ __
    | '_ \ / _` \ \ / / |/ _` |/ _` | __/ _ \| '__|
    | | | | (_| |\ V /| | (_| | (_| | || (_) | |
    |_| |_|\__,_| \_/ |_|\__, |\__,_|\__\___/|_|
                         |___/


    leftkey                -> 65                            // A this is the key code that triggers the action
    rightkey               -> 68                            // D this is the key code that triggers the action
    forwardkey             -> 87                            // W this is the key code that triggers the action
    backwardkey            -> 83                            // S this is the key code that triggers the action
    upkey                  -> 81                            // Q this is the key code that triggers the action
    downkey                -> 69                            // E this is the key code that triggers the action
    angletolerance         -> 60                            // this is the angle used to poroject the cone that checks which scenes are on the sight of the user
    hotspotvisibility      -> scene                         // model | scene -> that attribute indicates whether I check against all hotspots in the model or just those visible from the pano
    notfoundmove           -> 10                            // the amount of move that it will perform when no image is found in specific direction
    notfoundtime           -> 0.3                           // the amount of time that it will be used to perform the move when no image is found
    navigationmode         -> jumping                       // walking | jumping we can have those 2 types of navigation mode, we could even provide a method to dynamically cahnge the method
    navigationclick        -> true                          // allow to make click on the screen to navigate
    navigationspeed        -> 100                           // this is the speed that user will be moving around when navigation method is used
    walkingspeed           -> 0.1                           // this is the speed that user will be moving around when walking
    walkingfriction        -> 0.9                           // this is the friction applied while user will be moving around when walking
    walkratiochange        -> 0.8                           // define in which point of the distance the transition to next pano is performed, values range from 0-1, 0.8 means we should be 80% more far from the current pano to the shortest to change
    walktransition         -> true                          // this attribute, defines whether when walking (only in walk mode), the plugin need to perform a view transition to the position of the new found scene, or just keep the current position.
    loadsceneflags         -> MERGE|KEEPVIEW|KEEPMOVING     // the flags used to perform loadscene
    loadscenevars          -> null                          // the vars used to perform loadscene
    loadsceneblend         -> BLEND                         // the blend used to perform loadscene
    loadsceneblendtime     -> null                          // the blend time used to perform loadscene
    modeReturn             -> false                         // By using this mode the plugin will not perform any loadscene, just return to specific var the name of the scene
    returnaAction           -> null                         // the krpano action that will be called passing scene name and distance as arguments
    returnVRAction         -> null                          // the krpano action that will be called passing scene name and distance as arguments when user is in VR mode
    returnNotFoundAction   -> null                          // the krpano action that will be called when non scene is found while jumping
    returnNotFoundVRAction -> null                          // the krpano action that will be called when non scene is found while jumping in VR mode
    depthmapuse            -> true                          // this attribute is for telling the plugin to perform a transition from scene 2 scene or just make a simple loadscene with zoom, so when we do not have depthmap is going to make nice transitions
    hapticfeedback         -> true                          // this attribute let us use the haptic feedback on the controllers to inform the user about if the plugin found or not a new scene after clicking on screen, not used in returnMode

    floorspots             -> false                           // show hotspots on the ground, used when no geometry is drawn in the model
    floortooltip           -> false                           // show tooltips when over floor hotspots
    floorStyleSize         -> 20                              // defines the size of the hotspot
    floorStyleBorder       -> 3                               // defines the thickness of the border
    floorStyleAlpha        -> 0.6                             // defines the global alpha of the hotspot
    floorStyleBordercolor  -> 0x000000                        // color of the border
    floorStyleCirclecolor  -> 0xfafafa                        // color of the inner circle



    modeReturn = "true"
    returnAction = "sceneFound"
    returnNotFoundAction = "sceneNotFound"

    <action name="sceneFound" >
        debug('we have found %1 at a distance of %2');
        loadscene(%1, null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(0.5));
        set(events.onviewloaded, null);
        set(events.onkeydown, stoptween(view.tx|view.ty|view.tz);set(events.onkeydown,null); );
        tween(view.tx|view.ty|view.tz, calc('' + image.ox + '|' + image.oy + '|' + image.oz), 2, default, set(events.onkeydown,null);
    </action>

    <action name="sceneFoundSpeed" >
        debug('we have found %1 at a distance of %2'); set(distance,%2); set(speed,10);
        calc(transitionTime,distance / speed);
        loadscene(%1, null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(0.5));
        set(events.onviewloaded, null);
        set(events.onkeydown, stoptween(view.tx|view.ty|view.tz);set(events.onkeydown,null); );
        tween(view.tx|view.ty|view.tz, calc('' + image.ox + '|' + image.oy + '|' + image.oz), get(transitionTime), default, set(events.onkeydown,null);
    </action>

    <action name="sceneNotFound" >
        txtsplit(%1,'|',p0x,p0z,p1x,p1z);
        debug('no scene was found, current location is x:', p0x,' z:',p0z,' and click point is x:',p1x,' z:', p1z);
        tween(view.tx|view.tz, calc(p1x + '|' + p1z) ,0.3, default,tween(view.tx|view.tz, calc( p0x + '|' + p0z) ,0.3, default));
    </action>

    -->

    <action autorun="preinit" type="Javascript"><![CDATA[
        krpano.navPlugPan = [{"qu":0,"ti":0,"height":100,"ga":[]}];
        krpano.navPlugMod = [{"qu":0,"ne":0,"pu":[{"qu":0,"x":0,"y":0,"z":100,"fr":{"x":0,"y":0,"z":0},"cr":{"x":0,"y":0,"z":0},"re":0,"ki":[],"we":"0|0|0","dr":0}]}];
    ]]></action>

    <plugin name="navigator" keep="true" devices="html5"
        url="plugins/navigator.js"
        leftKey = "65"
        rightKey = "68"
        forwardKey = "87"
        backwardKey = "83"
        upKey = "81"
        downKey  = "69"



        angleTolerance = "60"
        hotspotVisibility = "scene"
        notFoundMove = "10"
        notFoundTime = "0.3"
        navigationMode = "jumping"
        navigationClick = "true"
        navigationSpeed = "80"
        walkingSpeed = "0.1"
        walkingFriction = "0.9"
        walkRatioChange = "0.8"
        loadsceneblendtime = "0.2"







        editMode = "true"
    />



    <!--
                                                         _
      _____   _____ _ __ _ __   __ _ _ __   ___    _   _(_)
     / _ \ \ / / _ \ '__| '_ \ / _` | '_ \ / _ \  | | | | |
    |  __/\ V /  __/ |  | |_) | (_| | | | | (_) | | |_| | |
     \___| \_/ \___|_|  | .__/ \__,_|_| |_|\___/   \__,_|_|
                        |_|
    -->

<!--    <plugin name="everpano_ui" keep="true" devices="html5" url="plugins/everpano_ui.js"

        vrPosition = "left"
        fullscreenPosition = "right"

        menuOpen = "0"
        menuAnimation = "1"
        showPanoTitle = "true"
        showNextPrevious = "1"
        showNPTooltips = "1"

    /> -->





    <!--
                     _             _ _
      ___ ___  _ __ | |_ _ __ ___ | | | ___ _ __ ___
     / __/ _ \| '_ \| __| '__/ _ \| | |/ _ \ '__/ __|
    | (_| (_) | | | | |_| | | (_) | | |  __/ |  \__ \
     \___\___/|_| |_|\__|_|  \___/|_|_|\___|_|  |___/

    -->

    <events name="navplugin_events" keep="true" webvr_onvrcontrollerbutton="navplugin_onvrcontrollerbutton()" />

    <action name="navplugin_onvrcontrollerbutton" scope="local">
        if(caller.vrbuttonindex == 1 AND caller.vrbuttonstate == 'up',
            txtadd(controllerName, 'vr_controller_' , calc(caller.vrcontroller.hand == 'left' ? 'l' : 'r'));
            plugin[navigator].makevrclick(get(controllerName));
        );
    </action>




    <!--
         _                                   _             _
      __| |_ __ __ _  __ _    ___ ___  _ __ | |_ _ __ ___ | |
     / _` | '__/ _` |/ _` |  / __/ _ \| '_ \| __| '__/ _ \| |
    | (_| | | | (_| | (_| | | (_| (_) | | | | |_| | | (_) | |
     \__,_|_|  \__,_|\__, |  \___\___/|_| |_|\__|_|  \___/|_|
                     |___/
    -->

    <!-- IF YOU WANT TO ADD ADDITIONAL DRAG CONTROLLER FOR TOUCH DEVICES -->
    <!-- WARNING !! THAT SHOULD BE ONLY USED WHEN YOU ARE IN WALKING NAVIGATION MODE -->
    <!-- IF YOU NEED TO USE IT NOT ONLY IN HANDHELD DEVICES ADJUST THE ATTRIBUTE ACCORDINGLY -->

    <!--

    <layer name="walkinfo_touch" keep="true" type="text" align="bottom"
        y="85"
        html="drag around[br]for walking" bgalpha="0.3" devices="handheld"
        css="color:#FFFFFF;text-align:center;" txtshadow="0 1 4 0x000000 1.0"
        vcenter="true"
        width="140" height="140" bgroundedge="180"
        ondown="dragcontrol();"
        />

    <action name="dragcontrol" scope="local">
        copy(mx,mouse.x);
        copy(my,mouse.y);
        tween(caller.alpha,0);
        asyncloop(caller.pressed,
                calc(walkaround.forward, (mouse.y - my) * -0.25);
                calc(walkaround.left,    (mouse.x - mx) * -0.25);
                copy(mx, mouse.x);
                copy(my, mouse.y);
          ,
            set(walkaround.left, 0);
            set(walkaround.forward, 0);
            tween(caller.alpha,1);
        );
    </action>

    -->







    <!--
                  _
    __      _____| |____   ___ __
    \ \ /\ / / _ \ '_ \ \ / / '__|
     \ V  V /  __/ |_) \ V /| |
      \_/\_/ \___|_.__/ \_/ |_|


    webvr support

    -->

    <!-- <include url="%VIEWER%/plugins/webvr.xml" /> -->

    <!-- force enabled positional tracking -->
    <!-- <plugin name="webvr" postracking="true" /> -->

    <!-- clear the default gamepad controls from the webvr.xml -->
    <!-- <action name="webvr_vrcontroller_gamepad_controls"></action> -->

    <!-- use depthbuffer for hotspots rendering -->
    <!-- <display depthbuffer="true" /> -->


    <!--
      __       _ _
     / _| ___ | | | _____      ___ __ ___   ___  _   _ ___  ___
    | |_ / _ \| | |/ _ \ \ /\ / / '_ ` _ \ / _ \| | | / __|/ _ \
    |  _| (_) | | | (_) \ V  V /| | | | | | (_) | |_| \__ \  __/
    |_|  \___/|_|_|\___/ \_/\_/ |_| |_| |_|\___/ \__,_|___/\___|

    include the followmouse tool
    -->
    <!-- <include url="%VIEWER%/plugins/followmouse.xml" /> -->



    <!--
                 _
      __ _ _   _| |_ ___  _ __ _   _ _ __
     / _` | | | | __/ _ \| '__| | | | '_ \
    | (_| | |_| | || (_) | |  | |_| | | | |
     \__,_|\__,_|\__\___/|_|   \__,_|_| |_|

    -->

    <!--
        UNCOMMENT THOSE LINES ABOVE TO HAVE AN AUTORUN FEATURE, MAKING A TRANSITION FROM PANO TO PANO
        YOU WILL NEED TO ADJUST TIME VALUES ACCORDINGLY TO YOUR NEEDS
        ALSO ADJUST IDLETIME TO DEFINE WHEN TO START THE AUTO TOUR
    -->

    <!--

    <events name="autoTourEvents" keep="true"
        onidle="startAutoTour();"
        onclick="autoTourClickEvent();"
        onmousedown="autoTourClickEvent();"
    />

    <action protect="true" name="startAutoTour">

        set(autoTourRuns, true);
        nextSceneLoop(+1);
        delayedcall(autotour,5.0,startAutoTour(););

    </action>

    <action protect="true" name="stopAutoTour">

        stopdelayedcall(autotour);
        set(autoTourRuns, false);

    </action>

    <action name="nextSceneLoop" scope="local" args="indexadd">

        add(newsceneindex, scene[get(xml.scene)].index, indexadd);
        sub(lastsceneindex, scene.count, 1);
        if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
        if(newsceneindex GT lastsceneindex, set(newsceneindex,0));

        transition2scene(get(scene[get(newsceneindex)].name),null, MERGE, BLEND(1));

    </action>

    <action name="autoTourClickEvent">
        if(autoTourRuns, stopAutoTour(););
    </action>


    <action name="transition2scene">

        loadscene('%1', null, MERGE|KEEPVIEW|KEEPMOVING, BLEND(0.5));
        set(events.onkeydown, stoptween(view.tx|view.ty|view.tz);set(events.onkeydown,null); );
        tween(view.tx|view.ty|view.tz, calc('' + image.ox + '|' + image.oy + '|' + image.oz), 2, default, set(events.onkeydown,null); );

    </action>

    -->




    <!--

                     _            _
      ___ ___  _ __ | |_ _____  _| |_ _ __ ___   ___ _ __  _   _
     / __/ _ \| '_ \| __/ _ \ \/ / __| '_ ` _ \ / _ \ '_ \| | | |
    | (_| (_) | | | | ||  __/>  <| |_| | | | | |  __/ | | | |_| |
     \___\___/|_| |_|\__\___/_/\_\\__|_| |_| |_|\___|_| |_|\__,_|

    contextmenu with different viewing projections

    -->
    <!-- <include url="%VIEWER%/plugins/contextmenu.xml" /> -->






    <!--
      __
     / _|_ __  ___
    | |_| '_ \/ __|
    |  _| |_) \__ \
    |_| | .__/|___/
        |_|

    frames/second counter
    -->

    <!-- <include url="%VIEWER%/plugins/fps.xml" /> -->





    <action name="setInitialPosition" autorun="onstart" >

        for(set(i,0), i LT style.count, inc(i),
            indexoftxt(is_everpano3D_style, get(style[get(i)].name), 'everpano3d_');
            if(is_everpano3D_style == 0 AND style[get(i)].linkedscene == xml.scene,
                copy(view.tx, style[get(i)].ox);
                copy(view.ty, style[get(i)].oy);
                copy(view.tz, style[get(i)].oz);
            );
        );

    </action>





</krpano>
